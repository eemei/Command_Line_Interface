/**
  ******************************************************************************
  * File Name          : main.c
  * Description        : Main program body
  ******************************************************************************
  ** This notice applies to any and all portions of this file
  * that are not between comment pairs USER CODE BEGIN and
  * USER CODE END. Other portions of this file, whether 
  * inserted by the user or by software development tools
  * are owned by their respective copyright owners.
  *
  * COPYRIGHT(c) 2017 STMicroelectronics
  *
  * Redistribution and use in source and binary forms, with or without modification,
  * are permitted provided that the following conditions are met:
  *   1. Redistributions of source code must retain the above copyright notice,
  *      this list of conditions and the following disclaimer.
  *   2. Redistributions in binary form must reproduce the above copyright notice,
  *      this list of conditions and the following disclaimer in the documentation
  *      and/or other materials provided with the distribution.
  *   3. Neither the name of STMicroelectronics nor the names of its contributors
  *      may be used to endorse or promote products derived from this software
  *      without specific prior written permission.
  *
  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  *
  ******************************************************************************
  */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "stm32f1xx_hal.h"

/* USER CODE BEGIN Includes */
#include <string.h>
#include "strtonum.h"
#include <stdio.h>
#include <stdlib.h>
#include <errno.h>
#include <ctype.h>
#include <limits.h>

/* USER CODE END Includes */

/* Private variables ---------------------------------------------------------*/
SPI_HandleTypeDef hspi1;

UART_HandleTypeDef huart1;

/* USER CODE BEGIN PV */
/* Private variables ---------------------------------------------------------*/

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_USART1_UART_Init(void);
static void MX_SPI1_Init(void);

/* USER CODE BEGIN PFP */
/* Private function prototypes -----------------------------------------------*/
void executeCMD(UART_HandleTypeDef *huart);
extern void initialise_monitor_handles(void);
/* USER CODE END PFP */

/* USER CODE BEGIN 0 */
#define MAXCLISTRING	100 	// Biggest string the user will type
uint8_t rxBuffer = 0; 			// where we store that one character that just came in
char rxString[MAXCLISTRING]; 	// where we build our string from characters coming in
int rxindex = 0; 				// index for going though rxString
#define CR		13				//"\r"
#define LF	 	10				//"\n"
#define BS		8				//"\b"
#define	del		127				//"del"

char *messageResponse = "hello\n";
uint8_t messageCommand[] = {"this command does not exit, please type 'help' to see the command list.\n"};
uint8_t messageError[] = {"is not a digit\n"};
uint8_t messageAddress[] = {"is an invalid register address. The example of command read should be as: read 0x2XXXXXXX 8\n"};
char *tempString;
long int getValue;
char *getChar;
char iState = 0;
//uint32_t *address;
int dataByte;
uint8_t* base_addr = (uint8_t *)SRAM_BASE;

uint8_t helpMessg[] = {"This shell commands are defined internally. Type 'help' to see this list \n write <address of register> <data> <data>\t write the data into the provide register address \n\t example: write 0x20000000 0xa 23\n\t\t write 0xa into 0x20000000 address \n\t\t write 23 into 0x200000001 address\n read <address> <number of byte> \t\t read the data from provide register address\n"};

void executeCMD(UART_HandleTypeDef *huart){
/**
 * Bits   |   Access   |   Name   | Reset  | Description |
 * [31:8] | Read only  | -------- | ------ |  Reserved   |
 * [7:0]  | Read-write | REG[7:0] | 0xXX   | ----------- |
 */
	int i = 0;
	char *writeb = "writeb";
	char *writeh = "writeh";
	char *writew = "writew";
	char *help ="help";
	char *read = "read";
	char *spi ="spi";
	char *mode = "mode";
	__IO uint32_t *addressw;
	__IO uint16_t *addressh;
	__IO uint8_t *addressb;
	uint8_t lineFeed[] ={'\n'};
	uint8_t backspace[] ={'\b'};
	uint8_t doubleQuote[] = {'"'};
	uint8_t space[] ={' '};
	uint8_t spimode[] = {"SPI in mode 0 mean CPHOL is low and CPHA is first edge\n"};
	int cmp;
	int getVal;
	static uint32_t hal_busy_counter = 0;
	uint8_t pData[] = {0x58, 0x68};

	rxString[rxindex] = (char)rxBuffer;
	rxindex++;
	HAL_UART_Transmit(&huart1, &rxBuffer, 1, 0); // Echo the character that caused this callback so the user can see what they are typing
	printf("rxindex = [ %d ]	rxBuffer= [ '%c' ]\n", rxindex, rxBuffer);
	//HAL_UART_Transmit_IT(&huart1, (uint8_t *)&messageResponse, 6);
	if (rxBuffer  == del || rxBuffer == BS){
		rxindex-=2;
		HAL_UART_Transmit(&huart1, space, sizeof(space),50);
		HAL_UART_Transmit(&huart1, backspace, sizeof(backspace),50);

		if(rxindex < 0){
			rxindex = 0;
		}
	}
	if (rxBuffer == LF){	// If user enter, response the cmd
		rxindex = 0;
		tempString = &rxString[0];
		printf("response\n");
		getChar = getSubString(&tempString);
		if(strcmp(getChar, help) == 0){
			HAL_UART_Transmit_IT(&huart1, (uint8_t *)helpMessg, sizeof(helpMessg));
			printf("help\n");
		}
		else if(strcmp(getChar, writew) == 0){
			getVal = getNumber(&tempString);
			if(getVal == -1){
				HAL_UART_Transmit(&huart1,doubleQuote, sizeof(doubleQuote),50);
				//HAL_UART_Transmit(&huart1,(uint8_t*)getVal, sizeof(getVal),50);
				HAL_UART_Transmit(&huart1,doubleQuote, sizeof(doubleQuote),50);
			  HAL_UART_Transmit_IT(&huart1, &messageError[0], sizeof(messageError));
			}
			else{
			  addressw = (uint32_t *)getVal;
			  while(*tempString != '\n'){
			  //	*(__IO uint8_t *)0x20000000 = 0xa;
			    if((getVal = getNumber(&tempString))!= -1){
		          *(__IO uint32_t *)addressw = getVal;
		          addressw++;
//		        GPIOB->ODR = iState & 1?0x100:0;
//		        iState++;
			    }
			    else{
			      HAL_UART_Transmit_IT(&huart1, &messageError[0], sizeof(messageError));
			      break;
			    }
		     }
		   }
		 }
		/*cmp = strcmp(getChar, writeh);  //writeh
		if(cmp == 0){
			addressh = (uint16_t *)getNumber(&tempString);
			while(*tempString != '\n'){
			  //	*(__IO uint8_t *)0x20000000 = 0xa;
		    *(__IO uint16_t *)addressh = getNumber(&tempString);
		    (uint16_t *)(addressh+0xffff)++;
			}
		}
		cmp = strcmp(getChar, writeb);  //writeb
		if(cmp == 0){
			addressb = (uint8_t *)getNumber(&tempString);
			while(*tempString != '\n'){
			  //	*(__IO uint8_t *)0x20000000 = 0xa;
		    *(__IO uint8_t *)addressb = getNumber(&tempString);
		    (uint8_t *)(addressb+0xff)++;
			}
		}*/
		else if(strcmp(getChar, read) == 0){
			addressw = (uint32_t *)getNumber(&tempString);
			HAL_UART_Transmit(&huart1, (uint8_t *)addressw, sizeof(addressw),0);
			HAL_UART_Transmit(&huart1, lineFeed, sizeof(lineFeed),0);
			dataByte = getNumber(&tempString);
			//if(isdigit(dataByte)){
			  while(dataByte != 1){
				dataByte--;
				addressw++;
				HAL_UART_Transmit(&huart1, (uint8_t *)addressw, sizeof(addressw),0);
				HAL_UART_Transmit(&huart1, lineFeed, sizeof(lineFeed),0);
			  }
		    //}
			//else{
            //  HAL_UART_Transmit_IT(&huart1, &messageError[0], sizeof(messageError));
			//    hal_busy_counter++;
		    //}
		}
		else if(strcmp(getChar, spi) == 0){
			getChar = NULL;
			getChar = getSubString(&tempString);
			if(strcmp(getChar, mode) == 0){
				if(*tempString != '\n'){
					getVal = 0;
					getVal = getNumber(&tempString);
					// |CPOL||CPHA|
					// 00, 01, 10, 11
					switch(getVal){
					 case 0 :
					   hspi1.Instance->CR1 = SPI_POLARITY_LOW;  //CPOL 1 BIT
					   hspi1.Instance->CR1 = SPI_PHASE_1EDGE;  //CPHA 0 BIT
					   break;
					 case 1 :
					   hspi1.Instance->CR1 = SPI_POLARITY_LOW;
					   hspi1.Instance->CR1 = SPI_PHASE_2EDGE;
					   break;
					 case 2 :
					   hspi1.Instance->CR1 = SPI_POLARITY_HIGH;
					   hspi1.Instance->CR1 = SPI_PHASE_1EDGE;
					   break;
					 case 3 :
				       hspi1.Instance->CR1 = SPI_POLARITY_HIGH;
					   hspi1.Instance->CR1 = SPI_PHASE_2EDGE;
					   break;
					}
				}
				else{
			      hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
			      hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
			      HAL_UART_Transmit_IT(&huart1, &spimode[0], sizeof(spimode));
				}
				if(HAL_SPI_Transmit_IT(&hspi1, pData, sizeof(pData))!= HAL_OK){
					hal_busy_counter++;
				}
			}
		}
		else{
		  HAL_UART_Transmit_IT(&huart1, &messageCommand[0], sizeof(messageCommand));
		}
	}
}


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{

    //__HAL_UART_FLUSH_DRREGISTER(&huart1); // Clear the buffer to prevent overrun
    executeCMD(&huart1);
    HAL_UART_Receive_IT(&huart1, &rxBuffer, 1);

}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){

}
/* USER CODE END 0 */

int main(void)
{

  /* USER CODE BEGIN 1 */
	uint8_t data[] = {0x77};

  /* USER CODE END 1 */

  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_USART1_UART_Init();
  MX_SPI1_Init();

  /* USER CODE BEGIN 2 */
  initialise_monitor_handles();
  //HAL_UART_Transmit_IT(&huart1, (uint8_t *)messageResponse, 4);

  //HAL_UART_Receive_IT(&huart1, &rxBuffer, 1);
  HAL_GPIO_WritePin(nss_GPIO_Port, nss_Pin, GPIO_PIN_RESET);
  HAL_SPI_Transmit_IT(&hspi1, data, sizeof(data));
  HAL_GPIO_WritePin(nss_GPIO_Port, nss_Pin, GPIO_PIN_SET);



  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
//		HAL_GPIO_TogglePin(AMBER_LED_GPIO_Port, AMBER_LED_Pin);
//		HAL_Delay(400);
  /* USER CODE END WHILE */

  /* USER CODE BEGIN 3 */

  }
  /* USER CODE END 3 */

}

/** System Clock Configuration
*/
void SystemClock_Config(void)
{

  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
  {
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
}

/* SPI1 init function */
static void MX_SPI1_Init(void)
{

  hspi1.Instance = SPI1;
  hspi1.Init.Mode = SPI_MODE_MASTER;
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi1.Init.NSS = SPI_NSS_SOFT;
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi1.Init.CRCPolynomial = 10;
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
  {
    _Error_Handler(__FILE__, __LINE__);
  }

}

/* USART1 init function */
static void MX_USART1_UART_Init(void)
{

  huart1.Instance = USART1;
  huart1.Init.BaudRate = 115200;
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart1) != HAL_OK)
  {
    _Error_Handler(__FILE__, __LINE__);
  }

}

/** Configure pins as 
        * Analog 
        * Input 
        * Output
        * EVENT_OUT
        * EXTI
*/
static void MX_GPIO_Init(void)
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(nss_GPIO_Port, nss_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(AMBER_LED_GPIO_Port, AMBER_LED_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin : nss_Pin */
  GPIO_InitStruct.Pin = nss_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
  HAL_GPIO_Init(nss_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : AMBER_LED_Pin */
  GPIO_InitStruct.Pin = AMBER_LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(AMBER_LED_GPIO_Port, &GPIO_InitStruct);

}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
void _Error_Handler(char * file, int line)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1) 
  {
  }
  /* USER CODE END Error_Handler_Debug */ 
}

#ifdef USE_FULL_ASSERT

/**
   * @brief Reports the name of the source file and the source line number
   * where the assert_param error has occurred.
   * @param file: pointer to the source file name
   * @param line: assert_param error line source number
   * @retval None
   */
void assert_failed(uint8_t* file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
    ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */

}

#endif

/**
  * @}
  */ 

/**
  * @}
*/ 

/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
