#include <Task.h>

TCB *createThread(char *name, void (*task)(void), uint32_t size){


	if(size < 128){
		size  = 128;
	}

	TCB *tcb = (TCB *)malloc(sizeof(TCB));
	tcb->name = name;
	tcb->task = task;
	tcb->stackSize = size;
	tcb->stackBegin = (uint32_t *)malloc(size);
	tcb->execReturnCode = 0xfffffff9;
	tcb->stackPointer = (uint32_t *)((tcb->stackBegin) + size);
	tcb->stackPointer -=16; //move down 4 byte
	/* for memory protection
		four bytes will be written with special bit patterns.
		If these patterns are over written then stack
		overflow has occurred. Not a full-proof method.
	*/
	tcb->stackPointer[0] = 0x2222222; //store 0x33333333 in R2 register
	tcb->stackPointer[1] = 0x3333333;
	tcb->stackPointer[3] = 0x44444444;

	return tcb;
}

TCB *initKernel(char *mainThreadName){
	TCB *tcb = (TCB *)malloc(sizeof(TCB));
	tcb->name = mainThreadName;
	tcb->stackSize = 0;
	tcb->stackBegin = 0;
	return tcb;
}
